-------------------------------------------------------------------------------
Bootloader Directory
Version 0.1, Dec 2018, mnv80
-------------------------------------------------------------------------------

These files provide a bootloader for G80-S, so that new ROM images can be downloaded over serial and be written to ROM without having to use an external ROM burner.

In order to do this, the bootloader runs independently of the monitor.  The bootloader can download a new monitor even if the currently installed monitor is corrupted.  

The bootloader is composed of:
 - serial port management and I/O routines
 - Intel hex format management routines
 - AT28C256 flash ROM management routines
 - an application that coordinates these routines
 - a jump vector that exposes the interesting primitives to other programs

These routines are also used in:
 - an independent utility to update the bootloader
 - optional monitor integration to download Intel hex files
 - optional monitor integration to copy RAM to ROM

Pre-requisites:
 - The hardware reset vector will jump to the jump vector for the bootloader
 - Bootloader will return to the monitor by jumping to the jump vector for INIT
 - Prior to INIT being in the jump vector, bootloader will exit to 01000h
 - The G80-S GAL will select ROM for write operations

High level operation:
 - Take control from the hardware reset
 - Initialize interrupts, stack and serial port
 - Display a message and wait for one second for serial input
 - If input is received, repeat the following until no error
 	- Prompt for and download a hex image to RAM
 	- Copy the image from RAM to ROM
	- Verify the copy
 - Jump to the monitor

Address shift:
New monitor images will be assembled with origin in ROM.  As a result, the corresponding .hex files will contain addresses in ROM.  The download routines normally copy the downloaded data to the address specified by the .hex file, but this is not possible for ROM addresses.  So the download routine forces the address MSB on.  This has no effect for downloads which target RAM (since it will already be on).  For ROM targets it shifts the image up by 8000h into RAM.

Reserved RAM:
The monitor reserves the top 5 pages of RAM for buffers, stack and TBD.  In order that the ROM writing routines be callable from (and more importantly, return to) monitor or user programs, the bootloader also respects the reserved RAM.

Bootloader ROM:
The combination of the address shift and the reserved RAM means that the bootloader will not alter the top 5 pages of RAM or ROM.  Neither will the bootloader ever alter itself.  This makes those pages the ideal place to store the bootloader itself.  So the bootloader starts at 7B00h.

Jumpvector:
The bootloader exposes useful routines to programs which may be assembled separately.  In order to do so, entry points for these routines are stored at fixed locations.  This array of entry points is the jump vector. The jump vector starts at 7B00h.  The jump vector may grow in the future but it will not move or change the order of entry points within a major release.

Scratchpad:
For the Z80 it is sometimes more efficient to use direct memory addresses than some register-relative mode.  The bootloader routines are intended to be called in ROM, or be assembled into different programs for different uses.  If fixed RAM locations were used this could conflict with the calling program.  To avoid this, RAM is allocated using a macro that manages temporary memory allocation.  The code still deals with direct memory addresses, but these may move according to which components are assembled together.  Application code can use the scratchpad macro as well.

Conventions:
 - Files which generate .hex output use the .asm suffix.
 - Files which contain only assembler symbols use the .h suffix.
 - Files intended to be included are wrapped in assembler directives to ensure that they are included only once.
 - There is something odd about include directives within conditional assembly.  Net result is that the top level program normally does all the INCLUDEs.

-------------------------------------------------------------------------------
bootloader directory
-------------------------------------------------------------------------------
bootloader.asm 
 - jump vector and the bootloader mainline

bootloader.h   
 - symbols to access the bootloader jump vector
 - each public symbol is the internal symbol prepended by '@'
 - this file is automatically generated from the bootloader.public file

ihex.asm
 - Intel Hex reader

at28.asm
 - Write to AT28C256 flash ROM

serial.asm
 - Low level serial I/O

format.asm
 - Formatted serial I/O 

putText.h
 - macro for simple output of a line of text

delay.asm
 - Low level delay routines

jumpvector.h
 - macros to manage the jump vector

scratchpad.h
 - macro to manage the scratchpad

updateBootloader.asm
 - standalone program to load or update the bootloader.
 - hooks the bootloader into the reset vector.
 - can add a bootloader to the default monitor

-------------------------------------------------------------------------------
sample directory
-------------------------------------------------------------------------------
downloadD000.asm
 - monitor command to download intel hex via the bootloader
 - origin D000h
 - optional

flashD000.asm
 - sample command to update the monitor
 - be sure to have donwload a monitor image before loading/running this...
 - origin D000h
 - optional

echo.asm
 - simple example of using bootloader routines from separately assembled code
 - origin 8000h
 - optional

-------------------------------------------------------------------------------
monitor directory
-------------------------------------------------------------------------------
dcall.h
 - symbols to access the monitor DCALL vector
 - similar to bootloader.h, but for monitor routines
 - new file

equates.asm
 - add ROM_BOT symbol
 - update existing file

hex_load.asm
 - allow downloading of images in ROM space
 - update existing file

mon_opt.asm
 - update call routine to address the 'broken' comment
 - update existing file

G80S.asm
 - add DCALL15 = INIT
 - update existing file

------------------------------------------------------------------------------
build instructions
-------------------------------------------------------------------------------
execute _openterm.bat to open a cmd window at that directory
execute build bootloader\bootloader to create the bootloader image
execute build bootloader\updateBootloader to create the update utility
execute build G80S to create the monitor image

set teraterm/serial parameters to 1ms/char, 0ms/line
use monitor/hexload to download updateBootloader.hex
use monitor/call 8000 to run updateBootloaser

when prompted, download bootloader.hex
The bootloader will be written and be linked into the restart vector.

if desired, set teraterm/serial parameters to 0ms/char, 10ms/line

-------------------------------------------------------------------------------
usage instructions
-------------------------------------------------------------------------------
press reset
while the Bootloader... message is displayed, press enter on SIOA
when prompted, download G80S.hex
The monitor will be written and restarted.

If no character is received within one second of the Bootloader... message then control passes to the monitor.

